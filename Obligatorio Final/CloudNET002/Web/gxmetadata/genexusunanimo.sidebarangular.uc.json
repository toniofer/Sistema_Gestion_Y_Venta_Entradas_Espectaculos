{
	"Name": "GeneXusUnanimo.SidebarAngular",
	"Target": "ANGULAR",
	"IsControlType": false,
	"Template": "{{=<% %>=}}<ch-sidebar-menu 	id=\"ch-sidebar-menu\" 	class=\"{{Class}}\" 	[menuTitle]=\"Title\"	[distanceToTop]=\"DistanceToTop\"	[collapsible]=\"Collapsible\"	active-item-id=\"{{ActiveItemId}}\" 	>    <ch-sidebar-menu-list>      <ch-sidebar-menu-list-item *ngFor=\"let menuItem of SidebarItems\" id=\"{{menuItem.id}}\" [itemIconSrc]=\"menuItem.icon\" [autoColor]=\"IconAutoColor\" (click)=\"SelectedItemTarget=menuItem.target; ItemClick();\">        {{menuItem.title}}		<ng-container *ngIf=\"menuItem.hasSubItems\">          <ch-sidebar-menu-list slot=\"list\">            <ch-sidebar-menu-list-item *ngFor=\"let menuSubItem of menuItem.SidebarSubItems\"  id=\"{{menuSubItem.id}}\" (click)=\"SelectedItemTarget=menuSubItem.target; ItemClick();\">		      {{menuSubItem.title}}			  <ng-container *ngIf=\"menuSubItem.hasSubItems\">				<ch-sidebar-menu-list slot=\"list\">					<ch-sidebar-menu-list-item *ngFor=\"let menuSubSubItem of menuSubItem.SidebarSubSubItems\" id=\"{{menuSubSubItem.id}}\" (click)=\"SelectedItemTarget=menuSubSubItem.target; ItemClick();\">					{{menuSubSubItem.title}}					</ch-sidebar-menu-list-item>				</ch-sidebar-menu-list>			  </ng-container>            </ch-sidebar-menu-list-item>		  </ch-sidebar-menu-list>		</ng-container>      </ch-sidebar-menu-list-item>    </ch-sidebar-menu-list>    <div slot=\"footer\">{{FooterText}}</div></ch-sidebar-menu><style>    gx-navbar ~ gx-layout :host > ch-sidebar-menu::part(menu) {        top: var(--gx-navbar-main-height, 60px);    }</style>", 
	"Events": [
		{
			"Name": "ItemClick",
			"On": "itemclick",
			"Parameters": ""
		} ,
		{
			"Name": "GetState",
			"On": "getstate",
			"Parameters": ""
		} 
	],
	"Properties": [
		{
			"Id": "Title",
			"Name": "Title",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "Class",
			"Name": "Class",
			"Type": "string",
			"Default": "ch-sidebar"
		} ,
		{
			"Id": "FooterText",
			"Name": "FooterText",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "DistanceToTop",
			"Name": "DistanceToTop",
			"Type": "numeric",
			"Default": ""
		} ,
		{
			"Id": "Collapsible",
			"Name": "Collapsible",
			"Type": "boolean",
			"Default": "true"
		} ,
		{
			"Id": "SidebarItems",
			"Name": "SidebarItems",
			"Type": "sdt",
			"Default": ""
		} ,
		{
			"Id": "ActiveItemId",
			"Name": "ActiveItemId",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "SelectedItemTarget",
			"Name": "SelectedItemTarget",
			"Type": "string",
			"Default": ""
		} ,
		{
			"Id": "isCollapsed",
			"Name": "isCollapsed",
			"Type": "boolean",
			"Default": ""
		} ,
		{
			"Id": "IconAutoColor",
			"Name": "IconAutoColor",
			"Type": "boolean",
			"Default": "false"
		} 
	],
	"Methods": {
		"Public": [
			{
				"Name": "GetActiveItem",
				"Source": "		const UC = this;		let activeItem = sessionStorage.getItem(\"active-item\");		UC.SidebarItems.activeItem = activeItem;		return activeItem;	",
				"Return": "",
				"Parameters": [
				]
			} 
		],
		"Private": [
		]
	},
	"Scripts": {
		"AfterShow": [
			{
				"Name": "initSidebar",
				"Source": "		const UC = this;		const sidebar = document.getElementById(\"ch-sidebar-menu\");				sidebar.addEventListener(\"collapseBtnClicked\", function(e: any){			UC.isCollapsed = e.detail.isCollapsed;			if (UC.GetState){				UC.GetState();			}		});	",
				"AngularLocation": ""
			} 
		],
		"BeforeShow": [
		]
	},
	"Dependencies": [
		{
			"Name": "@genexus/chameleon",
			"Version": "0.2.1",
			"AngularSchematics": false
		} 
	],
	"Imports": [
		{
			"Source": "		import { defineCustomElements as defineCustomElementsChameleon} from \'@genexus/chameleon/loader\';    ",
			"AngularLocation": "main",
			"AngularModuleImports": "",
			"AngularBootstrapLoader": "defineCustomElementsChameleon(window);"
		} 
	],
	"Styles": [
	]
}